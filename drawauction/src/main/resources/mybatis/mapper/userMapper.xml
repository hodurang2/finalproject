<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gdu.drawauction.dao.UserMapper">

	<select id="getUser" parameterType="Map" resultType="UserDto">
		SELECT USER_NO, EMAIL, PW, NAME, MOBILE, GENDER, AGREE, STATE, JOINED_AT, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, NICKNAME, INTRODUCTION
		  FROM USER_T
		<where>
			<if test="email != null">EMAIL = #{email}</if>
			<if test="pw != null">AND PW = #{pw}</if>
			<if test="userNo != null">AND USER_NO = #{userNo}</if>  
		</where>
	</select>
	
	<select id="getLeaveUser" parameterType="Map" resultType="LeaveUserDto">
    SELECT EMAIL, JOINED_AT, LEAVED_AT
      FROM LEAVE_USER_T
     WHERE EMAIL = #{email}
  </select>

  <select id="getInactiveUser" parameterType="Map" resultType="InactiveUserDto">
    SELECT USER_NO, EMAIL, PW, NAME, MOBILE, GENDER, AGREE, STATE, JOINED_AT, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, NICKNAME, INTRODUCTION, INACTIVED_AT
      FROM INACTIVE_USER_T
    <where>
      <if test="email != null">EMAIL = #{email}</if>
      <if test="pw != null">AND PW = #{pw}</if>
    </where>
  </select>
  
  <insert id="insertUser" parameterType="UserDto">
    INSERT INTO USER_T (
			USER_NO
		  , EMAIL
		  , PW
		  , NAME
		  , MOBILE
		  , GENDER
		  , AGREE
		  , STATE
		  , JOINED_AT
		  , POSTCODE
		  , ROAD_ADDRESS
		  , JIBUN_ADDRESS
		  , DETAIL_ADDRESS
		  , NICKNAME
		  , INTRODUCTION
    ) VALUES (
	        USER_SEQ.NEXTVAL
	      , #{email}
	      , #{pw}
	      , #{name}
	      , #{mobile}
	      , #{gender}
	      , #{agree}
	      , 0
	      , TO_DATE(#{joinedAt}, 'YYYY-MM-DD HH24:MI:SS')
	      , #{postcode}
	      , #{roadAddress}
	      , #{jibunAddress}
	      , #{detailAddress}
	      , #{nickname}
	      , #{introduction}
    )
  </insert>
  
  <!--/* 접속기록 넣기 */-->
  <insert id="insertAccess" parameterType="Map">
    INSERT INTO ACCESS_T (
    	EMAIL, LOGIN_AT
    ) VALUES (
		#{email}, SYSDATE
    )
  </insert>
  
  <!--/* 사용자 이메일 찾기 */-->
  <select id="findId" resultType="UserDto">
    SELECT USER_NO, EMAIL, PW, NAME, MOBILE, GENDER, AGREE, STATE, JOINED_AT, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, NICKNAME, INTRODUCTION, INACTIVED_AT
      FROM USER_T
     WHERE EMAIL = #{email}
       AND MOBILE = #{mobile}
  </select>
  
 <!--/* 비밀번호 찾기 */-->
  <select id="findPwCheck" resultType="int">
    SELECT COUNT(*)
      FROM USER_T
     WHERE NAME = #{name}
       AND EMAIL = #{email}
       AND MOBILE = #{mobile} 
  </select>
  
  <!--/* 비밀번호 바꾸기 */-->
  <update id="updatePw" parameterType="Map">
    UPDATE USER_T
       SET PW = #{pw}
     WHERE EMAIL = #{email}
       AND NAME = #{name}
  </update>
  
  
  <insert id="insertNaverUser" parameterType="UserDto">
    INSERT INTO USER_T (
			USER_NO
		  , EMAIL
		  , PW
		  , NAME
		  , MOBILE
		  , GENDER
		  , AGREE
		  , STATE
		  , JOINED_AT
		  , POSTCODE
		  , ROAD_ADDRESS
		  , JIBUN_ADDRESS
		  , DETAIL_ADDRESS
		  , NICKNAME
		  , INTRODUCTION
    ) VALUES (
	        USER_SEQ.NEXTVAL
	      , #{email}
	      , #{pw}
	      , #{name}
	      , #{mobile}
	      , #{gender}
	      , #{agree}
	      , 0
	      , TO_DATE(#{joinedAt}, 'YYYY-MM-DD HH24:MI:SS')
	      , #{postcode}
	      , #{roadAddress}
	      , #{jibunAddress}
	      , #{detailAddress}
	      , #{nickname}
	      , #{introduction}
    )
  </insert>
  
  <!--/* 탈퇴한 사용자 INSERT */-->
  <insert id="insertLeaveUser" parameterType="userDto">
    INSERT INTO LEAVE_USER_T (
        EMAIL
      , JOINED_AT
      , LEAVED_AT
    ) VALUES (
        #{email}
      , TO_DATE(#{joinedAt}, 'YYYY-MM-DD HH24:MI:SS')
      , SYSDATE
    )
  </insert>
  
  <!--/* 유저 삭제하기 */-->
  <delete id="deleteUser" parameterType="UserDto">
    DELETE
      FROM USER_T
     WHERE USER_NO = #{userNo}
  </delete>
  
   <!--/* 휴면 유저 insert  */-->
  <insert id="insertInactiveUser">
    INSERT INTO INACTIVE_USER_T (
		SELECT U.USER_NO, U.EMAIL, U.PW, U.NAME, U.MOBILE, U.GENDER, U.AGREE, U.STATE, U.JOINED_AT, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, NICKNAME, INTRODUCTION, A.LOGIN_AT 
		  FROM USER_T U LEFT OUTER JOIN ACCESS_T A
		    ON U.EMAIL = A.EMAIL
		 WHERE MONTHS_BETWEEN(SYSDATE, LOGIN_AT) >= 6
		    OR (LOGIN_AT IS NULL AND MONTHS_BETWEEN(SYSDATE, LOGIN_AT) >= 6))
  </insert>
  
  <delete id="deleteUserForInactive">
    DELETE
        FROM USER_T
 WHERE EMAIL IN(SELECT U.EMAIL
                  FROM USER_T U LEFT OUTER JOIN ACCESS_T A
                    ON U.EMAIL = A.EMAIL
                 WHERE MONTHS_BETWEEN(SYSDATE, LOGIN_AT) >= 6
                    OR (LOGIN_AT IS NULL AND  MONTHS_BETWEEN(SYSDATE, JOINED_AT) >= 6))
  </delete>

  <insert id="insertActiveUser" parameterType="String">  
    INSERT INTO USER_T (
      SELECT USER_NO, EMAIL, PW, NAME, MOBILE, GENDER, AGREE, STATE, JOINED_AT, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, NICKNAME, INTRODUCTION
        FROM INACTIVE_USER_T
       WHERE EMAIL = #{email}
    )
  </insert>

  <delete id="deleteInactiveUser" parameterType="String">
    DELETE
      FROM INACTIVE_USER_T
     WHERE EMAIL = #{email}  
  </delete>


</mapper>