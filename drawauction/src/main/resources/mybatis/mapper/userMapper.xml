<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gdu.drawauction.dao.UserMapper">
	
	<!--accociation-->
	<!-- BidDto에 대한 resultMap -->
  <resultMap type="BidDto"        id="BidMap">
    <id column="BID_NO"           property="bidNo"/>
    <result column="PRICE"        property="price" />
    <result column="BID_AT"       property="bidAt" />
    <result column="POSTCODE"     property="postcode" />
    <result column="ROAD_ADDRESS" property="roadAddress" />
    <result column="JIBUN_ADDRESS" property="jibunAddress" />
    <result column="DETAIL_ADDRESS" property="detailAddress" />
    
    <association javaType="AuctionDto"  property="auctionDto">
      <id column="AUCTION_NO"       property="auctionNo"/>
      <result column="START_PRICE"  property="startPrice"/>
      <result column="BUY_PRICE"    property="buyPrice"/>
      <result column="START_AT"     property="startAt"/>
      <result column="END_AT"       property="endAt"/>
      <result column="STATUS"       property="status"/>
      
      <association javaType="ArtDto"      property="artDto">
        <id column="ART_NO"         property="artNo"/>
        <result column="TITLE"      property="title"/>
        <result column="CONTENTS"   property="contents"/>
        <result column="ART_TYPE"   property="artType"/>
        <result column="WIDTH"      property="width"/>
        <result column="HEIGHT"     property="height"/>
        
        <association javaType="UserDto"    property="sellerDto">
          <id column="USER_NO"              property="sellerNo"/>
          <result column="EMAIL"            property="email"/>
          <result column="PW"               property="pw"/>
          <result column="NAME"             property="name"/>
          <result column="MOBILE"           property="mobile"/>
          <result column="GENDER"           property="gender"/>
          <result column="AGREE"            property="agree"/>
          <result column="STATE"            property="state"/>
          <result column="JOINED_AT"        property="joinedAt"/>
          <result column="POSTCODE"         property="postcode"/>
          <result column="ROAD_ADDRESS"     property="roadAddress"/>
          <result column="JIBUN_ADDRESS"    property="jibunAddress"/>
          <result column="DETAIL_ADDRESS"   property="detailAddress"/>
          <result column="NICKNAME"         property="nickname"/>
          <result column="INTRODUCTION"     property="introduction"/>
        </association>
        
        <association javaType="CategoryDto" property="categoryDto">
          <id        column="CATEGORY_NO"     property="categoryNo"/>
          <result    column="CATEGORY_NAME"   property="categoryName" />
        </association>
        
      </association>
    </association>
    
    <association javaType="UserDto"    property="bidderDto">
      <id column="USER_NO"              property="bidderNo"/>
      <result column="EMAIL"            property="email"/>
      <result column="PW"               property="pw"/>
      <result column="NAME"             property="name"/>
      <result column="MOBILE"           property="mobile"/>
      <result column="GENDER"           property="gender"/>
      <result column="AGREE"            property="agree"/>
      <result column="STATE"            property="state"/>
      <result column="JOINED_AT"        property="joinedAt"/>
      <result column="POSTCODE"         property="postcode"/>
      <result column="ROAD_ADDRESS"     property="roadAddress"/>
      <result column="JIBUN_ADDRESS"    property="jibunAddress"/>
      <result column="DETAIL_ADDRESS"   property="detailAddress"/>
      <result column="NICKNAME"         property="nickname"/>
      <result column="INTRODUCTION"     property="introduction"/>
      <result column="MY_PRICE"         property="myPrice" />
    </association>
    
  </resultMap>
	
	
	<select id="getUser" parameterType="Map" resultType="UserDto">
		SELECT USER_NO, EMAIL, PW, NAME, MOBILE, GENDER, AGREE, STATE, JOINED_AT, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, NICKNAME, INTRODUCTION
		  FROM USER_T
		<where>
	      <if test="email != null">EMAIL = #{email}</if>
	      <if test="pw != null">AND PW = #{pw}</if>
	      <if test="userNo != null">AND USER_NO = #{userNo}</if>
	    </where>
	</select>

	
	<!--/* 접속기록 넣기 */-->
  <insert id="insertAccess" parameterType="String">
    INSERT INTO ACCESS_T (
    	EMAIL, LOGIN_AT
    ) VALUES (
		#{email}, SYSDATE
    )
  </insert>
	
	<select id="getLeaveUser" parameterType="Map" resultType="LeaveUserDto">
    SELECT EMAIL, JOINED_AT, LEAVED_AT
      FROM LEAVE_USER_T
     WHERE EMAIL = #{email}
  </select>

  <select id="getInactiveUser" parameterType="Map" resultType="InactiveUserDto">
    SELECT USER_NO, EMAIL, PW, NAME, MOBILE, GENDER, AGREE, STATE, JOINED_AT, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, NICKNAME, INTRODUCTION, INACTIVED_AT
      FROM INACTIVE_USER_T
    <where>
      <if test="email != null">EMAIL = #{email}</if>
      <if test="pw != null">AND PW = #{pw}</if>
    </where>
  </select>
  
  <!--/* 사용자 추가하기 */-->
  <insert id="insertUser" parameterType="UserDto">
    INSERT INTO USER_T (
			USER_NO
		  , EMAIL
		  , PW
		  , NAME
		  , MOBILE
		  , GENDER
		  , AGREE
		  , STATE
		  , JOINED_AT
		  , POSTCODE
		  , ROAD_ADDRESS
		  , JIBUN_ADDRESS
		  , DETAIL_ADDRESS
		  , NICKNAME
    ) VALUES (
	        USER_SEQ.NEXTVAL
	      , #{email}
	      , #{pw}
	      , #{name}
	      , #{mobile}
	      , #{gender}
	      , #{agree}
	      , 0
	      , SYSDATE
	      , #{postcode}
	      , #{roadAddress}
	      , #{jibunAddress}
	      , #{detailAddress}
	      , #{nickname}
    )
  </insert>


	<!--/* 사용자 정보 수정하기 */-->
	<update id="updateUser" parameterType="UserDto">
		UPDATE USER_T
		   SET EMAIL = #{email}
             , NAME = #{name}
             , MOBILE = #{mobile}
		   	 , GENDER = #{gender}
		   	 , POSTCODE = #{postcode}
		   	 , AGREE = 0
		   	 , ROAD_ADDRESS = #{roadAddress}
		   	 , JIBUN_ADDRESS = #{jibunAddress}
		   	 , DETAIL_ADDRESS = #{detailAddress}
		   	 , NICKNAME = #{nickname}
		   	 , INTRODUCTION = #{introduction}
		 WHERE USER_NO = #{userNo}
	</update>


	<!--/* 탈퇴한 사용자 INSERT */-->
	  <insert id="insertLeaveUser" parameterType="UserDto">
	    INSERT INTO LEAVE_USER_T (
	        EMAIL
	      , JOINED_AT
	      , LEAVED_AT
	    ) VALUES (
	        #{email}
	      , #{joinedAt}
	      , SYSDATE
	    )
	  </insert>

  
  <!--/* 유저 삭제하기 */-->
  <delete id="deleteUser" parameterType="UserDto">
    DELETE
      FROM USER_T
     WHERE USER_NO = #{userNo}
  </delete>
  
   <!--/* 휴면 유저 insert  */-->
  <insert id="insertInactiveUser">
    INSERT INTO INACTIVE_USER_T (
		SELECT U.USER_NO, U.EMAIL, U.PW, U.NAME, U.MOBILE, U.GENDER, U.AGREE, U.STATE, U.JOINED_AT, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, NICKNAME, INTRODUCTION, A.LOGIN_AT 
		  FROM USER_T U LEFT OUTER JOIN ACCESS_T A
		    ON U.EMAIL = A.EMAIL
		 WHERE MONTHS_BETWEEN(SYSDATE, LOGIN_AT) >= 6
		    OR (LOGIN_AT IS NULL AND MONTHS_BETWEEN(SYSDATE, LOGIN_AT) >= 6))
  </insert>
  
  <delete id="deleteUserForInactive">
        DELETE
      FROM USER_T
     WHERE EMAIL IN(SELECT U.EMAIL
                      FROM USER_T U LEFT OUTER JOIN ACCESS_T A
                        ON U.EMAIL = A.EMAIL
                     WHERE MONTHS_BETWEEN(SYSDATE, LOGIN_AT) >= 6
                        OR (LOGIN_AT IS NULL AND MONTHS_BETWEEN(SYSDATE, JOINED_AT) >= 6))
  </delete>

  <insert id="insertActiveUser" parameterType="String">  
    INSERT INTO USER_T (
      SELECT USER_NO, EMAIL, PW, NAME, MOBILE, GENDER, AGREE, STATE, JOINED_AT, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, NICKNAME, INTRODUCTION
        FROM INACTIVE_USER_T
       WHERE EMAIL = #{email})
  </insert>

  <delete id="deleteInactiveUser" parameterType="String">
    DELETE
      FROM INACTIVE_USER_T
     WHERE EMAIL = #{email}
  </delete>

<!--/* 소셜로그인 */-->

<!--/* 네이버 로그인 mapper*/-->
	 <insert id="insertNaverUser" parameterType="UserDto">
    INSERT INTO USER_T (
			USER_NO
		  , EMAIL
		  , NAME
		  , MOBILE
		  , GENDER
		  , AGREE
		  , STATE
		  , JOINED_AT
		  , POSTCODE
		  , ROAD_ADDRESS
		  , JIBUN_ADDRESS
		  , DETAIL_ADDRESS
		  , NICKNAME
    ) VALUES (
    	USER_SEQ.NEXTVAL
    	, #{email}
    	, #{name}
    	, #{mobile}
    	, #{gender}
    	, #{agree}
    	, 1
    	, SYSDATE
    	, #{postcode}
    	, #{roadAddress}
    	, #{jibunAddress}
    	, #{detailAddress}
    	, #{nickname}
    )
  </insert>
  
<!--/* 카카오 로그인 mapper*/-->
  	<insert id="insertKakaoUser" parameterType="UserDto">
    INSERT INTO USER_T (
			USER_NO
		  , EMAIL
		  , NAME
		  , MOBILE
		  , GENDER
		  , AGREE
		  , STATE
		  , JOINED_AT
		  , POSTCODE
		  , ROAD_ADDRESS
		  , JIBUN_ADDRESS
		  , DETAIL_ADDRESS
		  , NICKNAME
    ) VALUES (
    	USER_SEQ.NEXTVAL
    	, #{email}
    	, #{name}
    	, #{mobile}
    	, #{gender}
    	, #{agree}
    	, 2
    	, SYSDATE
    	, #{postcode}
    	, #{roadAddress}
    	, #{jibunAddress}
    	, #{detailAddress}
    	, #{nickname}
    )
	</insert>
  


	<!--/* 아이디/비밀번호 찾기 */-->
	<!--/* 아이디 찾기 */-->

<select id="findId" resultType="UserDto">
    SELECT USER_NO, EMAIL, PW, NAME, MOBILE, GENDER, AGREE, STATE, JOINED_AT, POSTCODE, ROAD_ADDRESS, JIBUN_ADDRESS, DETAIL_ADDRESS, NICKNAME, INTRODUCTION
    FROM USER_T
    WHERE NAME = #{name}
</select>


<select id="findPw" resultType="int">
    SELECT COUNT(*)
    FROM USER_T
   WHERE EMAIL = #{email}
     AND NAME = #{name}
     AND MOBILE = #{mobile}
</select>

  <update id="updatePw" parameterType="Map">
    UPDATE USER_T
       SET PW = #{pw}
     WHERE EMAIL = #{email}
       AND NAME = #{name}
  </update>
  
  
  <!--/* 이름 중복 체크 */-->
  	<select id="nameCheck" resultType="int">
		SELECT COUNT(*) FROM USER_T
		   WHERE NAME = #{name}
	</select>

  <!--/* 닉네임 중복 체크 */-->
  	<select id="nicknameCheck" resultType="int">
		SELECT COUNT(*) FROM USER_T
		   WHERE NICKNAME = #{nickname}
	</select>
	

	<!--///////////////////////////////////////////////////////////////////////////////////////////-->
	<!--/* 입찰 / 응찰 작품수 */-->
	<select id="getAuctionBidCount" parameterType="int" resultType="int">
    SELECT COUNT(*) FROM (SELECT ART.ART_NO, ART.SELLER_NO, ART.TITLE, ART.CONTENTS, 
                              AUC.AUCTION_NO, AUC.END_AT, AUC.STATUS,
                              B.BID_NO, B.BIDDER_NO, B.PRICE AS 내입찰가, B.BID_AT,
                              ROW_NUMBER() OVER (PARTITION BY ART.ART_NO ORDER BY B.PRICE DESC) AS RN
                         FROM ART_T ART INNER JOIN AUCTION_T AUC
                           ON ART.ART_NO = AUC.AUCTION_NO INNER JOIN BID_T B
                           ON AUC.AUCTION_NO = B.AUCTION_NO
                        WHERE B.BIDDER_NO = #{bidderNo})
        WHERE RN = 1
  </select> 
  
  <select id="getAuctionBidList" parameterType="Map" resultMap="BidMap">
  SELECT Q1.ART_NO, Q1.TITLE, Q1.CONTENTS, Q1.BID_AT, Q1.MY_PRICE, Q2.PRICE, Q1.STATUS, Q1.END_AT
  FROM (SELECT ART_NO, SELLER_NO, TITLE, CONTENTS, AUCTION_NO, END_AT, STATUS, BID_NO, BIDDER_NO, MY_PRICE, BID_AT, RN1, ROW_NUMBER() OVER(ORDER BY BID_AT ASC) AS RN
          FROM (SELECT ART.ART_NO, ART.SELLER_NO, ART.TITLE, ART.CONTENTS, 
                       AUC.AUCTION_NO, AUC.END_AT, AUC.STATUS,
                       B.BID_NO, B.BIDDER_NO, B.PRICE AS MY_PRICE, B.BID_AT,
                       ROW_NUMBER() OVER (PARTITION BY ART.ART_NO ORDER BY B.PRICE DESC) AS RN1
                  FROM ART_T ART INNER JOIN AUCTION_T AUC
                    ON ART.ART_NO = AUC.AUCTION_NO INNER JOIN BID_T B
                    ON AUC.AUCTION_NO = B.AUCTION_NO
                 WHERE B.BIDDER_NO = #{bidderNo})
        WHERE RN1 = 1) Q1 LEFT OUTER JOIN (SELECT ART_NO, PRICE
                                             FROM (SELECT ART.ART_NO, ART.SELLER_NO, ART.TITLE, ART.CONTENTS, 
                                                          AUC.AUCTION_NO, AUC.END_AT, AUC.STATUS,
                                                          B.BID_NO, B.BIDDER_NO, B.PRICE, B.BID_AT,
                                                          ROW_NUMBER() OVER (PARTITION BY ART.ART_NO ORDER BY B.PRICE DESC) AS RN2
                                                     FROM ART_T ART INNER JOIN AUCTION_T AUC
                                                       ON ART.ART_NO = AUC.AUCTION_NO INNER JOIN BID_T B
                                                       ON AUC.AUCTION_NO = B.AUCTION_NO)
                                            WHERE RN2 = 1) Q2
                                               ON Q1.ART_NO = Q2.ART_NO
  WHERE RN BETWEEN #{begin} AND #{end}

  </select>
  
    <select id="getAuctionSalesCount" parameterType="int" resultType="int">
    SELECT COUNT(*) FROM (SELECT ART.ART_NO, ART.SELLER_NO, ART.CATEGORY_NO, ART.TITLE, ART.CONTENTS, ART.ART_TYPE, ART.WIDTH, ART.HEIGHT, 
                                 AUC.AUCTION_NO, AUC.START_PRICE, AUC.BUY_PRICE, AUC.START_AT, AUC.END_AT, AUC.STATUS
                            FROM ART_T ART INNER JOIN AUCTION_T AUC
                              ON ART.ART_NO = AUC.ART_NO
                           WHERE ART.SELLER_NO = #{sellerNo})
  </select> 
  
  <select id="getAuctionSalesList" parameterType="Map" resultMap="BidMap">
  SELECT AUCTION_NO, TITLE, CONTENTS, START_AT, START_PRICE, PRICE, STATUS, END_AT
    FROM (SELECT A.AUCTION_NO, A.TITLE, A.CONTENTS, A.START_AT, A.START_PRICE, A.END_AT, A.STATUS, A.SELLER_NO, A.ART_NO,
                 MAX(B.PRICE) AS PRICE, ROW_NUMBER() OVER(ORDER BY A.START_AT DESC) AS RN
            FROM (SELECT AUC.AUCTION_NO, AUC.START_PRICE, AUC.START_AT, AUC.END_AT, AUC.STATUS, ART.TITLE, ART.CONTENTS, ART.SELLER_NO, ART.ART_NO
                    FROM AUCTION_T AUC INNER JOIN ART_T ART
                      ON AUC.ART_NO = ART.ART_NO) A LEFT OUTER JOIN BID_T B
                      ON A.AUCTION_NO = B.AUCTION_NO
                   WHERE SELLER_NO = #{sellerNo}
                   GROUP BY A.AUCTION_NO, A.TITLE, A.CONTENTS, A.START_AT, A.START_PRICE, A.END_AT, A.STATUS, A.SELLER_NO, A.ART_NO)
   WHERE RN BETWEEN #{begin} AND #{end}
  </select>
	
	
</mapper>